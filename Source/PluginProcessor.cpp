/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains  the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

#include <stdio.h>
#include <stdlib.h>

#include <iomanip>
#include <locale>
#include <sstream>
#include <string> // this should be already included in <sstream>


//==============================================================================
TruePan_0_01AudioProcessor::TruePan_0_01AudioProcessor()
{
    ///////  I/O   ///////////
    UserParams[Gain] = 0.0;
    
    ///////  I/O   ///////////
}

TruePan_0_01AudioProcessor::~TruePan_0_01AudioProcessor()
{

}

//==============================================================================
const String TruePan_0_01AudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool TruePan_0_01AudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool TruePan_0_01AudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool TruePan_0_01AudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double TruePan_0_01AudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int  TruePan_0_01AudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int TruePan_0_01AudioProcessor::getCurrentProgram()
{
    return 0;
    
}

void TruePan_0_01AudioProcessor::setCurrentProgram (int index)
{
}

const String TruePan_0_01AudioProcessor::getProgramName (int index)
{
    return String();
}

void TruePan_0_01AudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void TruePan_0_01AudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    mSampleRate = getSampleRate();
    
}

void TruePan_0_01AudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void TruePan_0_01AudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{

    
    for(int i = getNumInputChannels(); i < getNumOutputChannels(); i++){
        
        //buffer.clear(i, 0, buffer.getNumSamples()); // causing noise!!!!!!!!!!!!!!!!!!
        
    }
    
    int numberOfChannels =  getNumInputChannels();
    
    
    if (numberOfChannels == 2)
    {
        // samples0 = Right, samples1 = Left
        /*** revisar si getWritePointer regresa un float*  ***/
        //float* samples0 = buffer.getWritePointer(0);
        //float* samples1 = buffer.getWritePointer(1);
        float* samples0; 
        float* samples1; 

        samples0 = buffer.getWritePointer(0);
        samples1 = buffer.getWritePointer(1);
        
        int n = 0;
        
        int delaySampleL = 0;
        int delaySampleR = 0;

        while (n < buffer.getNumSamples())
        {
            
            int ndelay1 = (int)ndelay;
            
            delaySampleL = delaySamplesPtr[0];
            delaySampleR = delaySamplesPtr[1];
            
            delayR = ndelay + delaySamplesPtr[1];
            //delayL = ndelay + delaySamplesPtr[0];
            //
            //delayL = ndelay + delaySampleL;
            //delayR = ndelay + delaySampleR;
            //delayL = ndelay + 0;
            //delayR = ndelay + 0;
            
            
            bufferDelayL[delayL] = samples1[n];
            bufferDelayR[delayR] = samples0[n];
            
            // Somewhere here it will overflow if delaySamplesPtr[] is larger than bufferDelayL.size or R
            if (delayL > 1023)//Buffer size. TODO: abstract.
            {
                delayL -= 1024;
            }
            if (delayR > 1023)
            {
                delayR -= 1024;
            }
            
            printf("Inside condition start/////////// \n");
                
                printf ("delaySamplesPtr 0: %d \n", delaySamplesPtr[0]);
                printf ("delaySamplesPtr 1: %d \n", delaySamplesPtr[1]);
                printf ("delaySamplesPtr 0: %f \n", delaySamplesPtr[0]);
                printf ("delaySamplesPtr 1: %f \n", delaySamplesPtr[1]);
            
                printf ("delayL 2: %d \n", delayL);
                printf ("delayR 3: %d \n", delayR);
            
                printf ("ndelay 4: %d \n", ndelay);
                printf ("n 5: %d \n", n);
                printf ("buffer.getNumSamples 6: %d \n", buffer.getNumSamples());
                printf("Inside condition stop/////////// \n");
            
            
             if ((ndelay > 1023)||(ndelay < 0))//bufferDelayL.size())
            {
                printf("Inside condition START/////////// \n");
                
                printf ("delaySamplesPtr 0: %d \n", delaySamplesPtr[0]);
                printf ("delaySamplesPtr 1: %d \n", delaySamplesPtr[1]);
                printf ("delaySamplesPtr 0: %f \n", delaySamplesPtr[0]);
                printf ("delaySamplesPtr 1: %f \n", delaySamplesPtr[1]);
            
                printf ("delayL 2: %d \n", delayL);
                printf ("delayR 3: %d \n", delayR);
            
                printf ("ndelay 4: %d \n", ndelay);
                printf ("n 5: %d \n", n);
                printf ("buffer.getNumSamples 6: %d \n", buffer.getNumSamples());
                printf("Inside condition STOP/////////// \n");
                ndelay = 0;
                
            }
            // Actual output
            //*samples1++ = bufferDelayL[delayL];
            //*samples0++ = bufferDelayR[delayR];
            samples1[n] = bufferDelayL[ndelay1];
            samples0[n] = bufferDelayR[ndelay1];
            
            ndelay++;
            if (ndelay > 1023)//bufferDelayL.size())
            {
                
                ndelay = 0;
                
            }
            
            n++;
            
        }
        
    }

}


//==============================================================================
bool TruePan_0_01AudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* TruePan_0_01AudioProcessor::createEditor()
{
    return new TruePan_0_01AudioProcessorEditor ( *this );
}

//==============================================================================
void TruePan_0_01AudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void TruePan_0_01AudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new TruePan_0_01AudioProcessor();
}
